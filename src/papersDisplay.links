open import Mvu;
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuCommands;

typename Author = (email: String, name: String, affiliation: String, idNum: Int);
typename Review = (userId: Int, review: String, score: Int);
typename PaperInfo = (title: String,
    paperid: Int,
    abstract: String, 
    body: String, 
    topic: String, 
    conflicts: String, 
    authors: [String]);

typename Model = Maybe(PaperInfo);

#Database

var db = database "links";
var papers = table "papers" with (title : String, paperid : Int, abstract : String, body : String, topic : String, conflicts : String) from db;
#Notice that table names must be lowercase, and column names must be lowercase
var userPaperConnection = table "userpaper" with (useremail : String, paperid : Int, submissionId : Int, authorOrder : Int) from db;
var reviews = table "reviews" with (useremail : String, paperid : Int, submissionId : Int, review : String, score : Int) from db;

sig getModel : (Int) ~%~> Model
fun getModel(paperid) {
  var maybe = 
    query nested { 
      for (x <-- papers) 
        where (x.paperid == paperid) 
          [(a=x.title,
          b=x.paperid,
          c=x.abstract,
          d=x.body,
          e=x.topic,
          f=x.conflicts,
          g =
            for (y <-- userPaperConnection)
              where (y.paperid == paperid)
                [y.useremail])] 
    };
  switch(maybe) {
    case [] -> Nothing
    case [x] -> Just((title = x.a, paperid = x.b, abstract = x.c, body = x.d, topic = x.e, conflicts = x.f, authors = x.g))
  }
}


sig getInitialModel : () ~%~> Model
fun getInitialModel() {
  switch(lookup("paperId", environment())) {
    case Just(paperid) ->
      if (isInt(paperid)) {
        getModel(stringToInt(paperid))
      } else {
        Nothing
      }
    case Nothing -> Nothing
  }
}

fun viewModel(model) {
  var makerow = fun((author)) {
     p(a0, textNode("Email: " ^^ author))
  };
  var keylist = MvuHTML.concatMap(makerow, model.authors);

  div(a0, textNode("Title: " ^^ model.title)) +*
  div(a0, textNode("Abstract: " ^^ model.abstract)) +*
  div(a0, textNode("Body: " ^^ model.body)) +*
  div(a0, textNode("Topic: " ^^ model.topic)) +*
  div(a0, textNode("Conflicts: " ^^ model.conflicts)) +*
  div(a0, keylist) 
}

#sig view : Maybe(Model) ~> MvuHTML.HTML(_)
fun view(model) { 
  switch(model) {
    case Just(model) -> viewModel(model)
    case Nothing -> textNode("Paper not found.")
  }

}

fun mainPage() {
    Mvu.runStatic("placeholder", getInitialModel(), view);
    print("hello");
    page

<html>

<body>

<div id="placeholder"></div>

</body>

</html>

}