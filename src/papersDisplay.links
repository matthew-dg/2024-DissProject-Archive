open import Mvu;
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuCommands;

typename Author = (email: String, name: String, affiliation: String, idNum: Int);
typename PaperInfo = (title: String,
    paperid: Int,
    abstract: String, 
    body: String, 
    topic: String, 
    conflicts: String, 
    authors: [Author]);

typename Model = Naybe(PaperInfo);

#Database

var db = database "links";
var papers = table "papers" with (title : String, paperid : Int, abstract : String, body : String, topic : String, conflicts : String) from db;
var userPaperConnection = table "userPaper" with (email : String, name : String, affiliation : String, paperid : Int) from db;


sig getInitialModel : () ~%~> Model
fun getInitialModel() {
  switch(lookup("diseaseId", environment())) {
    case Just(paperid) ->
      if (isInt(paperid)) {
        getModel(stringToInt(diseaseId))
      } else {
        Nothing
      }
    case Nothing -> Nothing
  }
}

sig getModel : (Int) ~%~> Model
fun getModel(paperid) {
  var maybe = query flat { for (x <-- papers) [(a=x.title,b=x.paperid,c=x.abstract,d=x.body,e=x.topic,f=x.conflicts)] where (x.paperid == paperid) };
  switch(maybe) {
    case [] -> Nothing
    case [x] -> Just((title = x.a, paperid = x.b, abstract = x.c, body = x.d, topic = x.e, conflicts = x.f, authors = []))
  }
}

fun view(model) {

    open MvuHTML;

    open MvuAttrs;
 
    var keylist =

        MvuHTML.concatMap(fun((k, v)) { p(a0, textNode("Key: " ^^ k) +* textNode(" Value " ^^ v)) },

                model);
 
  switch(model) {
    case Just(model) -> viewModel(model)
    case Nothing -> textNode("Disease not found.")
  }

}

fun mainPage() {

    var initialModel = ("hello", "");

    Mvu.runSimple("placeholder", initialModel, view, fun(_, _) { initialModel });

    page

<html>

<body>

<div id="placeholder"></div>

</body>

</html>

}