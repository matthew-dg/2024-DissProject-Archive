open import Mvu;
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuCommands;
import Common;

#Model and Message definitions
typename ReviewInfo = (abstract : String, assignmentid : Int, paperid: Int ,rating : Int, reviewtext : String, submit:Bool);
typename Message = [| UpdateScore:String | UpdateReviewText:String | TrySubmit | DeliverResult |];
typename Model = Maybe(ReviewInfo);

#Database
var db = database "links";
var reviews = table "reviews" with (assignmentid : Int, rating : Int, reviewtext : String) from db;
var users = table "users" with (email : String, name : String, affiliation : String, userid : Int) from db;
var papers = table "papers" with (title : String, 
  abstract : String, 
  body : String, 
  topic : String, 
  conflicts : String, 
  paperid : Int) where paperid readonly from db; 
var reviewassignments = table "reviewassignments" with (paperid : Int, reviewerid : Int, assignmentid : Int, completed : Bool) from db;

sig insertReview : (Int, Int, String) ~> ()
fun insertReview(assignmentid, rating, reviewtext) server {
  print("inserting review");
  insert reviews values (assignmentid, rating, reviewtext) [(assignmentid = assignmentid, rating = rating, reviewtext = reviewtext)];
  update (x <-- reviewassignments)
    where (x.assignmentid == assignmentid) 
      set (completed = true) 
}

sig getModel : (Int) ~%~> Model
fun getModel(paperid) {
  var curentUser = Common.getUserFromCookie(getCookie("currentUser")).userid;
  
    #getCookie("currentUser");
  var assign = 
    query { 
      for (x <-- reviewassignments) 
        where (x.paperid == paperid && x.reviewerid == curentUser) 
          [(a=x.assignmentid)]
    };

  var maybe = 
    query nested { 
      for (x <-- papers) 
        where (x.paperid == paperid) 
          [(a=x.paperid,b=x.abstract)] 
    };
  switch(maybe) {
    case [] -> Nothing
    case [x] -> Just((assignmentid = hd(assign).a, paperid = x.a ,rating = 0, reviewtext = "", abstract = x.b, submit = false))
  }
}

sig getInitialModel : () ~%~> Model
fun getInitialModel() {
  switch(lookup("paperId", environment())) {
    case Just(paperid) ->
      if (isInt(paperid)) {
        getModel(stringToInt(paperid))
      } else {
        Nothing
      }
    case Nothing -> Nothing
  }
}

sig viewModel : (ReviewInfo) ~> MvuHTML.HTML(Message)
fun viewModel(model) {
  Common.viewHeader() +*
  a(href("/displayPaper?paperId=" ^^ intToString(model.paperid)), textNode("Back to paper.")) +*
  p(a0, textNode("Abstract: " ^^ model.abstract)) +*
   form(class("paper-form"),
    label(for_("Review"), textNode("Review Text")) +*
    textarea(placeholder("Review Text") +@ name("Review Text") +@id("Review") +@ onInput(fun(str) { UpdateReviewText(str) }), h0) +*
    label(for_("rating"), textNode("Rating")) +*
    input(type("text") +@ placeholder("Rating") +@ name("Rating") +@ onInput(fun(str) { UpdateScore(str) }), h0) +*
    button(onClick(fun() { TrySubmit }), textNode("Sign Up"))
    )
}

sig view : (Model) ~> MvuHTML.HTML(Message)
fun view(model) { 
  switch(model) {
    case Just(model) -> viewModel(model)
    case Nothing -> textNode("Paper not found.")
  }
}

sig updt : (Message, Model) ~%~> (Model, MvuCommands.Command(Message))
fun updt(msg, model) {
  fun updtModel(model) {
    switch(msg) {
      case UpdateScore(txt) -> ((model with rating = stringToInt(txt)), MvuCommands.empty)
      case UpdateReviewText(txt) -> ((model with reviewtext = txt), MvuCommands.empty)
      case TrySubmit ->
        var cmd =
          MvuCommands.spawnProc(fun() { DeliverResult(insertReview(model.assignmentid, model.rating, model.reviewtext)) });
        (model, cmd)
      case DeliverResult -> 
        redirect("/displayPaper?paperId=" ^^ intToString(model.paperid));
        ((model with submit = true), MvuCommands.empty)
    }
  }
  switch(model) {
    case Just(model) -> 
      var (updatedModel, cmds) = updtModel(model);
      (Just(updatedModel), cmds)
    case Nothing -> (Nothing, MvuCommands.empty)
  }
}

fun mainPage() {
    Mvu.runCmd("placeholder", getInitialModel(), view, updt, MvuCommands.empty);
    Common.template()

}

