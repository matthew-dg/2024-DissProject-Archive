open import Mvu;
open import MvuHTML;
open import MvuAttrs;
import Common;

typename User = (email : String, name : String, userid : Int, affiliation : String, pcmember : Bool, admin : Bool);
typename Assignments = (paperId: Int, reviewerId: Int, reviewId: Int, completed: Bool);
typename ModelInfo = (currentUser: User, users: [User], currentPC: Int, currentAdmin: Int);
typename Model = Maybe(ModelInfo);

typename Message = [| UpdatePC:String | UpdateAdmin:String | SubmitPC | SubmitAdmin | DeliverResult | TakeAdmin | TakePC |];

#Database
var db = database "links";
var users = table "users" with (email : String, name : String, userid : Int, affiliation : String, pcmember : Bool, admin : Bool) from db;
var assignments = table "reviewassignments" with (paperId: Int, reviewerId: Int, reviewId: Int ,completed: Bool) from db;  
var papers = table "papers" with (title : String, paperid : Int) from db;
var userPaperConnection = table "userpaper" with (useremail : String, paperid : Int, submissionid : Int, authororder : Int) from db;
var reviews = table "reviews" with (paperid : Int, reviewerid : Int, rating : Int, reviewid :Int) from db;


sig updateAdmin : (Int) ~> ()
fun updateAdmin(int) server {
    update (x <-- users) 
        where (x.userid == int)
            set(email=x.email, name=x.name, userid=x.userid, affiliation=x.affiliation, pcmember=x.pcmember, admin=true)
}

sig updatePC : (Int) ~> ()
fun updatePC(int) server {
    update (x <-- users) 
        where (x.userid == int)
            set(email=x.email, name=x.name, userid=x.userid, affiliation=x.affiliation, pcmember=true, admin=x.admin)
}

sig removeAdmin : (Int) ~> ()
fun removeAdmin(int) server {
    update (x <-- users)
        where (x.userid == int)
            set(email=x.email, name=x.name, userid=x.userid, affiliation=x.affiliation, pcmember=x.pcmember, admin=false)
}

sig removePC : (Int) ~> ()
fun removePC(int) server {
    update (x <-- users)
        where (x.userid == int)
            set(email=x.email, name=x.name, userid=x.userid, affiliation=x.affiliation, pcmember=false, admin=x.admin)
}




sig getInitialModel : () ~%~> Model
fun getInitialModel() {
  var currentUser = Common.getUserFromCookie(getCookie("currentUser"));
  var allUsers = query { for (x <-- users) [(email=x.email, name=x.name, userid=x.userid, affiliation=x.affiliation, pcmember=x.pcmember, admin=x.admin)] };
  if (currentUser.admin || currentUser.pcmember) {
    Just((currentUser = currentUser, users = allUsers, currentPC = hd(allUsers).userid, currentAdmin = hd(allUsers).userid))
  } else {
    Nothing
  }
}

sig viewModel : (ModelInfo) ~> MvuHTML.HTML(Message)
fun viewModel(model) {
    var userOption = fun(user) {
        option(value(intToString(user.userid)), textNode(user.name))
    };

    Common.viewHeader() +*
    h2(a0,textNode("Admin Page")) +*
    h3(a0,textNode("Change PC status")) +*
    form(class("content"),
            select_(onChange(fun(int) { UpdatePC(int) }), concatMap(userOption, model.users)) +*
            button(onClick(fun() { SubmitPC }), textNode("Give PC User")) +*
            button(onClick(fun() { TakePC }), textNode("Remove PC User"))
    ) +*
    h3(a0,textNode("Change Admin status")) +*
    form(class("content"),
            select_(onChange(fun(int) { UpdateAdmin(int) }), concatMap(userOption, model.users)) +*
            button(onClick(fun() { SubmitAdmin }), textNode("Give Admin User")) +*
            button(onClick(fun() { TakeAdmin }), textNode("Remove Admin User"))
    )
}

fun view(model) {
    switch(model) {
        case Just(model) -> viewModel(model)
        case Nothing -> Common.viewHeader() +* p(a0, textNode("You are not logged in"))
    }
}

sig updt : (Message, Model) ~%~> (Model, MvuCommands.Command(Message))
fun updt(msg, model) {
    fun updateModel(model) { 
        switch(msg) {
            case UpdatePC(int) -> ((model with currentPC = stringToInt(int)), MvuCommands.empty)
            case UpdateAdmin(int) -> ((model with currentAdmin = stringToInt(int)), MvuCommands.empty)
            case SubmitPC -> ((model), MvuCommands.spawnProc(fun() { DeliverResult(updatePC(model.currentPC)) }))
            case SubmitAdmin -> ((model), MvuCommands.spawnProc(fun() { DeliverResult(updateAdmin(model.currentAdmin)) }))
            case TakePC -> ((model), MvuCommands.spawnProc(fun() { DeliverResult(removePC(model.currentPC)) }))
            case TakeAdmin -> ((model), MvuCommands.spawnProc(fun() { DeliverResult(removeAdmin(model.currentAdmin)) }))
            case DeliverResult -> ((model), MvuCommands.empty)}
    }
    
    switch(model) {
        case Just(model) -> 
            var (updatedModel, cmds) = updateModel(model);
            (Just(updatedModel), cmds)
        case Nothing -> (Nothing, MvuCommands.empty)
    }
}

fun mainPage() {
    var user = getCookie("currentUser");
    
    var loggedIn = user <> "";
    if (loggedIn) {
         Mvu.runCmd("placeholder", getInitialModel(), view, updt, MvuCommands.empty)
    } else {
        redirect("/login")
    };
    Common.template()
}