open import Mvu;
open import MvuHTML;
open import MvuAttrs;
import Common;

typename User = (email : String, name : String, userid : Int, affiliation : String, pcmember : Bool, admin : Bool);
typename Assignments = (paperId: Int, reviewerId: Int, reviewId: Int, completed: Bool);
typename ModelInfo = (curentUser: User, users: [User]);
typename Model = Maybe(ModelInfo);

typename Msg = [|GenerateAllocations|];

#Database
var db = database "links";
var users = table "users" with (email : String, name : String, userid : Int, affiliation : String, pcmember : Bool, admin : Bool) from db;
var assignments = table "reviewassignments" with (paperId: Int, reviewerId: Int, reviewId: Int ,completed: Bool) from db;  
var papers = table "papers" with (title : String, paperid : Int) from db;
var userPaperConnection = table "userpaper" with (useremail : String, paperid : Int, submissionid : Int, authororder : Int) from db;
var reviews = table "reviews" with (paperid : Int, reviewerid : Int, rating : Int, reviewid :Int) from db;


sig getInitialModel : () ~%~> Model
fun getInitialModel() {
  var curentUser = Common.getUserFromCookie(getCookie("currentUser"));
  var allUsers = query { for (x <-- users) [(email=x.email, name=x.name, userid=x.userid, affiliation=x.affiliation, pcmember=x.pcmember, admin=x.admin)] };
  if (curentUser.admin || curentUser.pcmember) {
    Just((curentUser = curentUser, users = allUsers))
  } else {
    Nothing
  }
}

sig viewModel : (ModelInfo) ~> MvuHTML.HTML(())
fun viewModel(model) {
    var listUser = fun(user) {
        div(a0,
            p(a0,textNode(user.email)) +*
            p(a0,textNode(user.name)) +*
            p(a0,textNode(user.affiliation)) +*
            p(a0,
                if (user.userid == model.curentUser.userid) {
                    textNode("You")
                } else {
                    a(href("/assignReview/" ^^ intToString(user.userid)), textNode("Assign Review"))
                }
            )
        )
    };

    var userOption = fun(user) {
        option(value(intToString(user.userid)), textNode(user.name))
    };

    var users = concatMap(listUser, model.users);
    var userOptions = concatMap(userOption, model.users);
    var listAttr = fun(val) {
        attr("list", val)
    };
    Common.viewHeader() +*
    users +* 
    form(a0,
        select_(a0, userOptions)) +*
    p(a0, textNode("You are logged in as " ^^ model.curentUser.name))
}

fun view(model) {
    switch(model) {
        case Just(model) -> viewModel(model)
        case Nothing -> Common.viewHeader() +* p(a0, textNode("You are not logged in"))
    }
}

fun mainPage() {
    var user = getCookie("currentUser");
    
    var loggedIn = user <> "";
    if (loggedIn) {
        Mvu.runStatic("placeholder", getInitialModel(), view)
    } else {
        print("User is not logged in");
        redirect("/login")
    };
    Common.template()
}