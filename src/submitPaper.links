open import Mvu;
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuCommands;

#Model and Message definitions
typename Author = (email: String, name: String, affiliation: String, editing: Bool, idNum: Int);
typename Model = (title: String, 
    abstract: String, 
    body: String, 
    topic: String, 
    conflicts: String, 
    submit: Bool,
    authors: [Author], 
    currentAuthor: Int,
    currentAuthorName: String,
    currentAuthorEmail: String,
    currentAuthorAffiliation: String);

#Used to package the info to be sent to the database for the authors
typename AuthorInfo = (userEmail: String, paperId: Int, authorOrder: Int);

sig initialModel : Model
var initialModel = (title = "", 
    abstract = "", 
    body = "",  
    topic = "", 
    conflicts = "", 
    submit = false , 
    authors = [],
    currentAuthor = 0,
    currentAuthorName = "",
    currentAuthorEmail = "",
    currentAuthorAffiliation = "");

typename Message = 
    [| UpdateTitle:String 
    | UpdateAbstract:String 
    | UpdateBody:String 
    | UpdateTopic:String 
    | UpdateConflicts:String 
    | UpdateAuthorName:(String, Int)
    | UpdateAuthorEmail:(String, Int)
    | UpdateAuthorAffiliation:(String, Int)
    | AddAuthor
    | TrySubmit 
    | DeliverResult |];

#helper functions
fun isInList(x, xs) {
  if (xs == []) {
    false
  } else {
    if (x == hd(xs)) {
      true
    } else {
      isInList(x, tl(xs))
    }
  }
}

fun updateEmailHandler(id) {
  onInput(fun (str) { UpdateAuthorEmail(str, id) })
}

fun updateNameHandler(id) {
  onInput(fun (str) { UpdateAuthorName(str, id) })
}

fun updateAffiliationHandler(id) {
  onInput(fun (str) { UpdateAuthorAffiliation(str, id) })
}

fun enterHandler() {
  onEnter(fun() { AddAuthor })
}

fun updateEntryHandler(id) {
  onInput(fun(str) { UpdateEntry(id, str) })
}

sig newAuthor : (String, String, String, Int) ~> Author
fun newAuthor(email,name,affiliation,num) {
    (email = email, name = name, affiliation = affiliation, editing = false, idNum = num)
}

sig getAddedAuthor : (Model) ~> [Author]
fun getAddedAuthor(model) {
  if (model.currentAuthorName == "") {
    model.authors
  } else {
    model.authors ++ [newAuthor(model.currentAuthorEmail, model.currentAuthorName, model.currentAuthorAffiliation, model.currentAuthor)]
  }
}


fun ca(xs) { MvuAttrs.concat(xs) }
fun ch(xs) { MvuHTML.concat(xs) }
var noAttrs = MvuAttrs.empty;
var noChildren = MvuHTML.empty;


#Database
var db = database "links";
var papers = table "papers" with (title : String, abstract : String, body : String, topic : String, conflicts : String) from db;  
var userPaper = table "userPaper" with (userEmail : String, paperId : Int, order: Int) from db;
var users = table "users" with (email : String, name : String, password : String, id: Int) from db;


sig insertPaper : (String, String, String, String, String, [Author]) ~> ()
fun insertPaper(enteredTitle,enteredAbstract,enteredBody, enteredTopic, enteredConflicts, enteredAuthors) server {
  var orderCounter = 0;
  var submisionInfo = for(a <- enteredAuthors) {
    [(userEmail = a.email, paperId = 0, order = orderCounter)]
  };
  print("inserting paper");
  insert userPaper values (userEmail, order, paperId) submisionInfo;
  print("inserted paper");
  insert papers values (title, abstract, body,topic,conflicts) [(title = enteredTitle, abstract = enteredAbstract, body = enteredBody, topic = enteredTopic, conflicts = enteredConflicts)]
}
#Views 
sig viewNewAuthorInput : (Model) ~> HTML(Message)
fun viewNewAuthorInput(model) {
  header (class("header"),
    ch([
      h1 (noAttrs, textNode("Authors")),
      input (
        ca([type ("text"),
            class ("new-author"),
            placeholder ("Name"),
            name ("newAuthor"),
            value(model.currentAuthorName),
            updateNameHandler(model.currentAuthor),
            enterHandler()]),
        noChildren),
      input (
        ca([type ("Email"),
            class ("new-author"),
            placeholder ("Email"),
            name ("newAuthor"),
            value(model.currentAuthorEmail),
            updateEmailHandler(model.currentAuthor),
            enterHandler()]),
        noChildren),
      input (
        ca([type ("text"),
            class ("new-author"),
            placeholder ("Affiliation"),
            name ("newAuthor"),
            value(model.currentAuthorAffiliation),
            updateAffiliationHandler(model.currentAuthor),
            enterHandler()]),
        noChildren)  
    ]))
}

sig viewSingleAuthor : (Author) ~> HTML(Message)
fun viewSingleAuthor(author) {
  header (class("view"), ch([
    input(
      ca([
        type("text"),
        class("edit"),
        value(author.name),
        name("title"),
        updateNameHandler(author.idNum),
        id("todo-" ^^ (author.name))]),

        #blurHandler(todo.id, false),
        #editingEnterHandler(todo.id, false)]),
        noChildren),
    input(
      ca([
        type("text"),
        class("edit"),
        value(author.email),
        name("title"),
        id("todo-" ^^ (author.email))]),
        #updateEntryHandler(todo.id),
        #blurHandler(todo.id, false),
        #editingEnterHandler(todo.id, false)]),
        noChildren),
    input(
      ca([
        type("text"),
        class("edit"),
        value(author.affiliation),
        name("title"),
        id("todo-" ^^ (author.affiliation))]),
        #updateEntryHandler(todo.id),
        #blurHandler(todo.id, false),
        #editingEnterHandler(todo.id, false)]),
        noChildren)
  ]))
}

sig viewAuthors : ([Author]) ~> HTML(Message)
fun viewAuthors(authors) {
  section (class("main"), ch([
    ul(
      ca([
        class("todo-list")]),
        ch(map(viewSingleAuthor, authors)))]))
}


sig viewPaperInput : (Model) ~> HTML(Message)
fun viewPaperInput(model) {
      form(a0,
        input(type("text") +@ placeholder("Title") +@ name("title") +@ onKeyUp(fun(str) { UpdateTitle(str) }), h0) +*
        input(type("text") +@ placeholder("Abstract") +@ name("abstract") +@ onKeyUp(fun(str) { UpdateAbstract(str) }), h0) +*
        input(type("textarea") +@ placeholder("Body") +@ name("body") +@ onKeyUp(fun(str) { UpdateBody(str) }), h0) +*
        input(type("text") +@ placeholder("Topic") +@ name("topic") +@ onKeyUp(fun(str) { UpdateTopic(str) }), h0) +*
        input(type("text") +@ placeholder("Conflicts") +@ name("conflicts") +@ onKeyUp(fun(str) { UpdateConflicts(str) }), h0) +*
        button(onClick(fun() { TrySubmit }), textNode("Submit"))
        ) +*

    

    a(href("/"), textNode("Home"))
}


sig view : (Model) ~> MvuHTML.HTML(Message)
fun view(model) {
 div (class ("todomvc-wrapper"),
    section (class ("todoapp"), ch([
      viewPaperInput(model),
      viewNewAuthorInput(model),
      viewAuthors(model.authors)
    ]))
  )
}

sig updt : (Message, Model) ~%~> (Model, MvuCommands.Command(Message))
fun updt(msg, model) {
  switch(msg) {
    case TrySubmit ->
      var cmd =
        MvuCommands.spawnProc(fun() { DeliverResult(insertPaper(model.title, model.abstract, model.body, model.topic, model.conflicts, model.authors)) });
      ((model with submit = false), cmd)
    case AddAuthor -> 
      ((model with currentAuthor = model.currentAuthor + 1, currentAuthorName = "", 
      currentAuthorEmail = "", currentAuthorAffiliation = "", authors = getAddedAuthor(model)), MvuCommands.empty)
    case DeliverResult -> ((model with submit = true), MvuCommands.empty)
    case UpdateTitle(txt) -> ((model with title = txt), MvuCommands.empty)
    case UpdateAbstract(txt) -> ((model with abstract = txt), MvuCommands.empty)
    case UpdateBody(txt) -> ((model with body = txt), MvuCommands.empty)
    case UpdateTopic(txt) -> ((model with topic = txt), MvuCommands.empty)
    case UpdateConflicts(txt) -> ((model with conflicts = txt), MvuCommands.empty)
    case UpdateAuthorName(txt, id) -> 
      if(model.currentAuthor == id) { 
        ((model with currentAuthorName = txt), MvuCommands.empty)
      } else {
        var updateAuthor = fun(author) {
          if(author.idNum == id) {
            (author with name = txt)
          } else {
            author
          }
        };
        ((model with authors = map(updateAuthor, model.authors)), MvuCommands.empty)
      }
    case UpdateAuthorEmail(txt, id) -> ((model with currentAuthorEmail = txt), MvuCommands.empty)
    case UpdateAuthorAffiliation(txt, id) -> ((model with currentAuthorAffiliation = txt), MvuCommands.empty)
  }
}

fun mainPage() {
  var loggedIn = getCookie("currentUser") <> "";
    if (loggedIn) {
        ()
    } else {
        redirect("/")
    };

  Mvu.runCmd("placeholder", initialModel, view, updt, MvuCommands.empty);
    page
        <div id = "placeholder"></div>
}
