import Mvu;
import MvuHTML;
import MvuAttrs;
import Common;


typename Model = (text: String, counter: Int, dataText: String, userEmail: String);

typename Msg = [| UpdateText:String | IncrCounter |];

sig initialModel : Model
var initialModel = (text = "", counter = 0, dataText = "Nout", userEmail = "");

#Database
var db = database "links";
var users = table "users" with (email : String, name : String, userid : Int, afiliation : String, pcmember : Bool, admin : Bool) from db;

sig getInitialModel : (String) ~> Model
fun getInitialModel(userId) server {
    var user = Common.getUserFromCookie(userId);
    (initialModel with userEmail = (user).email)
}

sig view : (Model) ~> MvuHTML.HTML(Msg)
fun view(model) {
    open MvuHTML;
    open MvuAttrs;

    Common.viewHeader() +*

    p(a0, textNode(model.userEmail)) +*
    input(onInput(fun(str) { UpdateText(str) }) +@ value(model.text), h0) +*
    p(a0, textNode(model.text)) +*
    p(a0, textNode(show(model.counter))) +*
    p(a0, textNode(model.dataText)) +*
    button(onClick(fun() { IncrCounter }), textNode("Increment")) +*
    a(href("/signup"), textNode("Sign Up")) +*
    a(href("/login"), textNode("Log In")) +*
    a(href("/logout"), textNode("Logout")) +*
    a(href("/submitPaper"), textNode("Submit Paper")) +*
    a(href("/PaperList"), textNode("Papers"))
}

sig updt : (Msg, Model) ~> Model
fun updt(msg, model) {
    switch (msg) {
        case UpdateText(txt) -> 
            (model with text = txt)
        case IncrCounter -> (model with counter = model.counter + 1)
    }
}


fun mainPage() {
    var user = getCookie("currentUser");
    
    var loggedIn = user <> "";
    if (loggedIn) {
        ()
    } else {
        redirect("/login")
    };

    var sendModel = getInitialModel(user);

    Mvu.runSimple("placeholder", sendModel, view, updt);
    Common.template()
}
