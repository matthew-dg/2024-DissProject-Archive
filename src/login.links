open import Mvu;
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuCommands;
import HomePage;

typename Model = (email: String, password: String, loginSuccess:Bool);

typename Message = [| DeliverResult:Bool | TryLogin | UpdateEmail:String | UpdatePassword:String |];

sig initialModel : Model
var initialModel = (email = "", password = "", loginSuccess = false);

#placeholder till real authentication is implemented
sig validAuth : (String, String) -> Bool
fun validAuth(email, pass) {
  email == "2571284d@student.gla.ac.uk" && pass == "Blah"
}

sig view : (Model) ~> MvuHTML.HTML(Message)
fun view(model) {
    
  form(a0,
    input(type("email") +@ placeholder("Email") +@ name("email") +@ onKeyUp(fun(str) { UpdateEmail(str) }), h0) +*
    input(type("password") +@ placeholder("Password") +@ name("password") +@ onKeyUp(fun(str) { UpdatePassword(str) }), h0) +*
    button(onClick(fun() { TryLogin }), textNode("Sign Up")) 
    ) +*
    
    a(href("/signup"), textNode("Sign Up"))
    }

sig updt : (Message, Model) ~%~> (Model, MvuCommands.Command(Message))
fun updt(msg, model) {
  switch(msg) {
    case TryLogin ->
      var cmd =
        MvuCommands.spawnProc(fun() { DeliverResult(validAuth(model.email, model.password)) });
      ((model with loginSuccess = false), cmd)
    case DeliverResult(correct) -> 
      var home = if (correct) {
        setCookie("currentUser", model.email);
        redirect("/")
      } else {
        setCookie("curentUser", "")
      };
    ((model with loginSuccess = correct), MvuCommands.empty)
    case UpdateEmail(txt) -> ((model with email = txt), MvuCommands.empty)
    case UpdatePassword(txt) -> ((model with password = txt), MvuCommands.empty)
  }
}


fun mainPage() {
    var loggedIn = getCookie("currentUser") <> "";
    if (loggedIn) {
        redirect("/")
    } else {
        ()
    };

    Mvu.runCmd("placeholder", initialModel, view, updt, MvuCommands.empty);
    page
         <div id = "placeholder"></div>
}