open import Mvu;
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;

typename Model = (text: String, counter: Int, homeLink: String, signUpSuccess: Bool);

typename Msg = [| UpdateText:String | IncrCounter |];

sig initialModel : Model
var initialModel = (text = "", counter = 0, homeLink = "/", signUpSuccess = false);
var ae = MvuAttrs.empty;
var he = MvuHTML.empty;

fun reverseString(str) {
    implode(reverse(explode(str)))
  }

sig insertUser : (String, String, String) ~> ()
fun insertUser(enteredEmail,enteredName,enteredPassword) {
    var db = database "links";
    var users = table "users" with (email : String, name : String, password : String) from db;
    insert users values (email, name, password) [(email = enteredEmail, name = enteredName, password = enteredPassword)]
}

sig view : (Model) ~> MvuHTML.HTML(Msg)
fun view(model) {
    form(a0,
        input(type("email") +@ placeholder("Email") +@ name("email"), he) +*
        input(type("text") +@ placeholder("Name") +@ name("name"), he) +*
        input(type("password") +@ placeholder("Password") +@ name("password"), he) +*
        input(type("submit") +@ value("Sign Up"), he) 
        ) +*
    p(a0, textNode("WASSSUP")) +*
    a(href(model.homeLink), textNode("Home"))
    }

sig updt : (Msg, Model) ~> Model
fun updt(msg, model) {
    switch (msg) {
        case UpdateText(txt) -> (model with text = txt)
        case IncrCounter -> (model with counter = model.counter + 1)
        case Send(txt) -> ( model with signUpSuccess = insertUser(txt.email, txt.name, txt.password))
    }
}


fun mainPage() {
    Mvu.runSimple("placeholder", initialModel, view, updt);
    page
        <div id = "placeholder"></div>
}